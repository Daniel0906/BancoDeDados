--TRIGGERS
-- Ex1)Criar um gatilho para restringir as inserções na tabela 
--EMPLOYEES a determinado horário comercial de segunda a sexta-feira.
--Se um usuário tentar inserir no sábado ou fora do horário,
--o gatilho falhará e a instrução sofrerá rollback.

CREATE OR REPLACE TRIGGER seguranca_emp
BEFORE INSERT ON employees
BEGIN
IF (TO_CHAR(sysdate, 'DY') IN ('SAB', 'DOM')) OR (TO_CHAR(sysdate, 'HH24') NOT BETWEEN '08' AND '12')
THEN RAISE_APPLICATION_ERROR (-20500, 'Somente poder inserir em horario comercial.');
END IF;
END;

--TESTANDO:
INSERT INTO employees
(employee_id, last_name, email, hire_date, job_id) VALUES
(900, 'Romano', 'romano@gmail.com', SYSDATE, 'IT_PROG');

--DESABILITAR UMA TRIGGER TEMPORARIAMENTE
ALTER TRIGGER seguranca_emp DISABLE;

-- TENTAR INSERIR NOVAMENTE

--EM SEGUIDA HABILITAR TRIGGER NOVAMENTE 
ALTER TRIGGER seguranca_emp ENABLE;

--CONSULTAR TRIGGERS EXISTENTES NO USUARIO: USER_TRIGGERS 
SELECT TRIGGER_NAME,TRIGGER_TYPE, TABLE_NAME, COLUMN_NAME FROM USER_TRIGGERS;

--CONSULTAR O SCRIPT DA TRIGGER USER_SOURCE
SELECT TEXT FROM USER_SOURCE WHERE
NAME = 'SEGURANCA_EMP';

--EXCLUIR UMA TRIGGER:
DROP TRIGGER seguranca_emp;

-- Ex.2)Crie um gatilho para permitir que somente determinados funcionários
--possam receber salários abaixo de 10000. Se um usuário tentar fazer isto, 
--o gatilho gera um erro.

CREATE OR REPLACE TRIGGER verifica_salario
BEFORE INSERT OR UPDATE OF salary ON employees
FOR EACH ROW
BEGIN
IF NOT (:NEW.JOB_ID IN ('ST_CLERK', 'IT_PROG'))
AND :NEW.SALARY<10000 THEN
RAISE_APPLICATION_ERROR(-20202, 'Este empregado nao pode ter este salario.');
END IF;
END;

--TESTANDO...
UPDATE EMPLOYEES SET SALARY = 500 WHERE JOB_ID = 'IT_PROG';

UPDATE employees SET salary = 500 WHERE employee_id = 201;

--EXCLUIR A TRIGGER
DROP TRIGGER verifica_salario;

--CRIAR TABELA(VALORES ANTIGOS E NOVOS)
CREATE TABLE auditoria
(usuario varchar2(50),
 data      date,
 nome_antigo varchar2(50),
 nome_novo varchar2(50),
 cargo_antigo varchar2(30),
 cargo_novo varchar2(30),
 salario_antigo number(7,2),
 salario_novo number(7,2));

 -- Ex.3)Criar um gatilho na tabela EMPLOYEES para adicionar linhas
 --a uma tabela de usuário AUDITORIA, fazendo log da atividade com a 
 --tabela EMPLOYEES. O gatilho registra os valores de diversas colunas
 --antes e depois das alterações de dados, usando os qualificadores OLD 
 --e NEW com o respectivo nome de coluna.

CREATE OR REPLACE TRIGGER audita_emp
AFTER DELETE OR INSERT OR UPDATE ON employees
FOR EACH ROW
BEGIN
INSERT INTO auditoria
VALUES
(USER, SYSDATE, :OLD.first_name, :NEW.first_name, :OLD.job_id, :NEW.job_id, :OLD.salary, :NEW.salary);
END;

--TESTANDO...
UPDATE EMPLOYEES SET SALARY = SALARY * 1.50 WHERE EMPLOYEE_ID = 123;

SELECT * FROM auditoria;

DROP TRIGGER audita_emp;

--WHEN: RESTRICAO DE GATILHO
--RESTRICAO DE LINHA:
CREATE OR REPLACE TRIGGER salario
BEFORE INSERT OR UPDATE OF salary ON employees
FOR EACH ROW
WHEN (NEW.job_id = 'SA_REP')
BEGIN
IF INSERTING THEN :NEW.commission_pct := 0;
ELSIF :OLD.commission_pct IS NULL
THEN :NEW.commission_pct := 0;
ELSE :NEW.commission_pct := :OLD.commission_pct *
(:NEW.salary/:OLD.salary);
END IF;
END;

